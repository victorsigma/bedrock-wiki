import{_ as e,c as o,o as t,e as a}from"./404.md.f0d453c2.js";const g=JSON.parse('{"title":"Molang","description":"","frontmatter":{"title":"Molang","tags":["intermediate"],"mentions":["yanasakana","TheDoctor15","MedicalJewel105","DoubleShotgun","Luthorius","TheItsNameless"]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Accessing Values","slug":"accessing-values","link":"#accessing-values","children":[]},{"level":2,"title":"Handling values","slug":"handling-values","link":"#handling-values","children":[]}],"relativePath":"concepts/molang.md"}'),n={name:"concepts/molang.md"},i=a('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Pretty much everything evaluates to a number; if something doesn&#39;t evaluate to a number, you can use an <code>operator</code> to make it into one. You can basically just think of Molang as one big math equation.</p><p>An equation evaluates to <code>true</code> when any number except <code>0</code> is returned. When I reference <code>returning</code>, I&#39;m talking about the output of an equation. There is also a <code>return</code> statement, but I don&#39;t usually use it, and will therefore not be talking about it.</p><h2 id="accessing-values" tabindex="-1">Accessing Values <a class="header-anchor" href="#accessing-values" aria-hidden="true">#</a></h2><p>There are three main ways to access and use values in Molang (queries, variables and temp variables)</p><ul><li><p><strong>Queries</strong> are read only values returned by the game. You cannot set these values, only read them. (<code>query.example_query</code> | <code>q.example_query</code>)</p></li><li><p><strong>Variables</strong> are read and write values that you can manipulate, these can be set and read through Molang. (<code>variable.example_variable</code> | <code>v.example_variable</code>)</p><ul><li>There are also hard-coded variables which act practically the same way as queries, but can only be used in certain situations.</li></ul></li><li><p><strong>Temp. Variables</strong> are practically the same as variables, except they only exist in the current scope. (<code>temp.example_temp</code> | <code>t.example_temp</code>)</p><ul><li>A &quot;scope&quot; can refer to the current <code>for_each</code> or <code>loop</code> <em>or</em> just the current expression, if it&#39;s not used within either</li></ul></li></ul><h2 id="handling-values" tabindex="-1">Handling values <a class="header-anchor" href="#handling-values" aria-hidden="true">#</a></h2><ul><li><p><strong>Logical Operators</strong> can be used to convert non-numbers into 1s or 0s. These include: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p><ul><li><p>Example.) &quot;<code>q.get_equipped_item_name == &#39;stick&#39;</code>&quot; Will evaluate to <code>1</code>/<code>true</code> when holding a stick</p></li><li><p>There is also a <em>second</em> set of <em>Logical Operators</em> which can be used to &#39;group&#39; values into <code>and/or</code> statements, often used in cases where you need <em>multiple</em> things to evaluate to <code>true</code> or just <em>one out of many</em>. <code>&amp;&amp;</code> represents an <code>and</code> statement, and <code>||</code> represents an <code>or</code> statement.</p><ul><li>Example.) &quot;<code>q.is_sneaking &amp;&amp; q.is_using_item</code>&quot; Will evaluate to <code>1</code>/<code>true</code> when sneaking <em>and</em> using an item</li><li>Example.) &quot;<code>q.is_sneaking || q.is_jumping</code>&quot; // Evaluates to <code>1</code>/<code>true</code> when either jumping <em>or</em> sneaking</li></ul></li></ul></li><li><p><strong>Parentheses</strong>, <code>( )</code>, are also a major help when grouping values or performing math operations.</p><ul><li>Example.) &quot;<code>q.is_sneaking &amp;&amp; (q.get_equipped_item_name == &quot;stick&quot; || q.get_equipped_item_name == &quot;diamond&quot;)</code>&quot; Will evaluate to <code>1</code>/<code>true</code> when sneaking <em>and</em> holding either a stick <em>or</em> a diamond</li></ul></li><li><p><strong>Conditional Operators</strong> can be used as <code>if/else</code> statements.</p><ul><li>A <em>binary</em> conditional operator refers to just using <code>?</code>. When this is used, it&#39;ll output your value or <code>0</code> depending on whether the given input value is <code>true</code>. <ul><li>Example.) &quot;<code>q.is_sneaking ? 5</code>&quot; Will output a <code>5</code> when sneaking, otherwise returning a <code>0</code></li></ul></li><li>A <em>trinary</em> conditional operator refers to using <code>?</code> and <code>:</code>. When this is used, it&#39;ll output one of the two given values depending on whether your given input value is <code>true</code>. <ul><li>Example.) &quot;<code>q.is_sneaking ? 10 : 3</code>&quot; Will output a <code>10</code> when sneaking, otherwise returning a <code>3</code></li></ul></li></ul></li></ul>',8),l=[i];function s(c,d,r,u,h,p){return t(),o("div",null,l)}const _=e(n,[["render",s]]);export{g as __pageData,_ as default};
