import{_ as e,c as a,o,e as n}from"./404.md.f0d453c2.js";const f=JSON.parse('{"title":"Namespaces","description":"","frontmatter":{"title":"Namespaces","mentions":["SirLich","MedicalJewel105"]},"headers":[{"level":2,"title":"Picking a namespace","slug":"picking-a-namespace","link":"#picking-a-namespace","children":[]},{"level":2,"title":"Where to use namespaces?","slug":"where-to-use-namespaces","link":"#where-to-use-namespaces","children":[]},{"level":2,"title":"Where NOT to use namespaces.","slug":"where-not-to-use-namespaces","link":"#where-not-to-use-namespaces","children":[]}],"relativePath":"concepts/namespaces.md"}'),s={name:"concepts/namespaces.md"},t=n('<p>Namespaces are identifiers that mark content ownership. You can think of them as folders. Namespaces are helpful because they keep naming conflicts from happening.</p><p>Namespaces in addon creation can essentially be thought of as &quot;the part to the left of the colon&quot;. For example, <code>minecraft</code> is the namespace of <code>minecraft:zombie</code>. The general form is <code>namespace:name</code>.</p><p>As a concrete example of why namespaces are helpful, let&#39;s imagine you create a new Mob. You name it <code>minecraft:shark</code>, not aware that you should create your own namespace for custom content. Next year, Mojang decides to add sharks into the game! Now there is a naming conflict since there are two definitions of <code>minecraft:shark</code>. Your addon will break.</p><p>If you had instead used <code>your_namespace:shark</code>, the naming conflict wouldn&#39;t have happened.</p><h2 id="picking-a-namespace" tabindex="-1">Picking a namespace <a class="header-anchor" href="#picking-a-namespace" aria-hidden="true">#</a></h2><p>A suitable namespace is unique to you. Something like <code>mob</code> or <code>cars</code> or <code>content</code> or <code>custom</code> would be a <strong>bad</strong> namespace since another developer might come up with the same namespace as you.</p><p>A suitable namespace is short. You will be writing your namespace a <strong>LOT</strong>, so the shorter, the better. <code>george_carlin_the_comedian</code> would be a lousy namespace for this reason.</p><p>For personal projects, I recommend a convenient version of your player name, and for commercial projects, I recommend a suitable version of the company name.</p><p>Some good examples:</p><ul><li><code>gcarlin</code></li><li><code>sirlich</code></li><li><code>cubeworld</code></li><li><code>bworks</code></li></ul><p><strong>DO NOT USE</strong> <code>minecraft</code> or <code>minecon</code> as a namespace unless editing a vanilla file. Not only is it a terrible idea, but Minecraft reserves these, and it won&#39;t even work.</p><h2 id="where-to-use-namespaces" tabindex="-1">Where to use namespaces? <a class="header-anchor" href="#where-to-use-namespaces" aria-hidden="true">#</a></h2><p>In short, you should use namespaces as often as you can.</p><p>For starters, you should use a namespace when adding custom entities to the game.</p><p><code>sirlich:shark</code> is much better than <code>shark</code>.</p><p>It would be best if you also used namespaces for components and events. Just like Mojang uses <code>minecraft:pig_saddled</code> you should use <code>namespace:my_mob_event</code>, and <code>namespace:my_component_group</code>.</p><p>It would be best if you also used namespaces in animation controllers, render controllers, and animations.</p><p>For example: <code>controller.animation.namespace.entity_name.action</code> is better than <code>controller.animation.my_action</code>.</p><h2 id="where-not-to-use-namespaces" tabindex="-1">Where NOT to use namespaces. <a class="header-anchor" href="#where-not-to-use-namespaces" aria-hidden="true">#</a></h2><p>The actual file structure does not need namespaces.</p><p><code>animations/namespace/my_entity/animation</code> is more confusing than <code>animations/my_entity/animation</code>.</p>',21),c=[t];function i(r,d,p,m,l,h){return o(),a("div",null,c)}const _=e(s,[["render",i]]);export{f as __pageData,_ as default};
