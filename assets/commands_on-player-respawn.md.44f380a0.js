import{_ as p}from"./chunks/3.035a77e6.js";import{_ as c,c as i,a as s,w as t,e as a,b as e,d as n,r,o as d}from"./404.md.f0d453c2.js";const x=JSON.parse('{"title":"On Player Respawn","description":"","frontmatter":{"title":"On Player Respawn","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":5},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]},{"level":2,"title":"Tick JSON","slug":"tick-json","link":"#tick-json","children":[]}],"relativePath":"commands/on-player-respawn.md"}'),u={name:"commands/on-player-respawn.md"},m=a('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player respawns from death state.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add respawn dummy</code></p><p>If you prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load.html">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2>',8),h=a(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">execute as @e [scores={respawn=1}] run say I died and respawned.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @a respawn 1</span></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @e [type=player] respawn 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+p+'" alt="commandBlockChain3"></p><p>Here we have used an <code>/execute - say</code> command as an example but you can use any command you prefer and as many as you require.</p><p>Just make sure to follow the given order and properly use the selector argument <code>@e [scores={respawn=1}]</code> as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><ul><li><strong><code>respawn=0</code></strong> this means the player is alive or had already respawned.</li><li><strong><code>respawn=1</code></strong> this means the player died and is now respawning, ie. respawned <em>just now</em>, in the current gametick.</li><li><strong><code>@a</code></strong> selector will target all players alive/dead so we use it to mark everyone as 1 &#39;respawning&#39;</li><li><strong><code>@e</code></strong> selector on the other hand will only target players who are alive, so we can use this to mark all alive players 0 &#39;respawned&#39;</li></ul><p>Now that <em>respawning</em> players are 1 and <em>respawned</em> players are 0 we can use this knowledge to run our desired commands on the players respawning.</p><p>In the system, your desired commands must come before the other 2 commands because players change from death state to alive state along the start of the gametick before commands are run.</p><p>Hence; if we were to put them at the end then the other 2 commands would set respawning players score to 0 first and then the commands you want to run won&#39;t be able to select those players as our selector argument is <code>@e [scores={respawn=1}]</code> not 0. Using 0 would not work as then it would repeat endlessly even on players who have already respawned.</p><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-hidden="true">#</a></h2><p>If you are using functions instead of command blocks, the <code>on_player_respawn</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions.html#tick-json">Functions</a> documentation for further info.</p>',11),y=a(`<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">values</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">on_player_respawn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be be as follows:</p>`,2),_=e("blockquote",null,[e("p",null,[e("strong",null,"Note:"),n(" the scoreboard names (in this case: 'respawn') may end up being used by other people. Appending "),e("code",null,"_"),n(" and a set of randomly generated characters after would be a choice that reduces the probability of collisions. Similar technique can be employed for the "),e("code",null,".mcfunction"),n(" filenames. Ex:")]),e("ul",null,[e("li",null,[e("code",null,"respawn_0fe678")]),e("li",null,[e("code",null,"on_player_respawn_0fe678.mcfunction")])])],-1);function w(f,b,g,k,v,C){const o=r("CodeHeader"),l=r("FolderView");return d(),i("div",null,[m,s(o,null,{default:t(()=>[n("on_player_respawn.mcfunction")]),_:1}),h,s(o,null,{default:t(()=>[n("BP/functions/tick.json")]),_:1}),y,s(l,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_player_respawn.mcfunction","BP/functions/tick.json"]},null,8,["paths"]),_])}const F=c(u,[["render",w]]);export{x as __pageData,F as default};
