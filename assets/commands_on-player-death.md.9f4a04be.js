import{_ as i}from"./chunks/4.bf191be1.js";import{_ as c,c as p,a as n,w as l,e as s,b as e,d as a,r as t,o as d}from"./404.md.f0d453c2.js";const T=JSON.parse('{"title":"On Player Death","description":"","frontmatter":{"title":"On Player Death","category":"On Event Systems","mentions":["BedrockCommands","zheaEvyline"],"nav_order":4},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"System","slug":"system","link":"#system","children":[]},{"level":2,"title":"Explanation","slug":"explanation","link":"#explanation","children":[]},{"level":2,"title":"Tick JSON","slug":"tick-json","link":"#tick-json","children":[]}],"relativePath":"commands/on-player-death.md"}'),u={name:"commands/on-player-death.md"},m=s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://discord.gg/SYstTYx5G5" target="_blank" rel="noreferrer">Sourced By Bedrock Commands Community Discord</a></p><p>This system will run your desired commands on the event that a player dies.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p><em>To be typed in Chat:</em></p><p><code>/scoreboard objectives add alive dummy</code></p><p>If you prefer to have the objective added automatically on world initialisation, follow the process outlined in <a href="/commands/on-first-world-load.html">On First World Load.</a></p><h2 id="system" tabindex="-1">System <a class="header-anchor" href="#system" aria-hidden="true">#</a></h2>',8),h=s(`<div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">scoreboard players set @a [scores={alive=!2}] alive 0</span></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @e [type=player] alive 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">#Your Commands Here (example)</span></span>
<span class="line"><span style="color:#C3E88D;">execute as @a [scores={alive=0}] run say I died</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">scoreboard players set @a [scores={alive=0}] alive 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+i+'" alt="commandBlockChain4"></p><p>Here we have used an <code>/execute - say</code> command as an example but you can use any command you prefer and as many as you require.</p><p>Just make sure to follow the given order and properly add the selector argument <code>scores={alive=0}</code> as shown for your desired commands.</p><h2 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-hidden="true">#</a></h2><ul><li><p><strong><code>alive=0</code></strong> this means player is dead.</p></li><li><p><strong><code>alive=1</code></strong> this means player is alive.</p></li><li><p><strong><code>alive=2</code></strong> this means player is dead and we have run our desired commands on/from them.</p></li><li><p><strong><code>@a</code></strong> selector will target all players alive/dead so we use it to mark everyone as 0 &#39;dead.&#39;</p><ul><li>Note: we will ignore 2 or it will end up making the commands execute on dead players again. We only want our commands to execute once.</li></ul></li><li><p><strong><code>@e</code></strong> selector on the other hand will only target players who are alive, so we can use this to mark all alive players 1 &#39;alive.&#39;</p></li><li><p>Now that dead players are 0 and alive players are 1 we can use this knowledge to run our desired commands on the dead players.</p><ul><li>Keep in mind we need to set their score to 2 after or otherwise the commands will keep executing till they respawn.</li></ul></li></ul><h2 id="tick-json" tabindex="-1">Tick JSON <a class="header-anchor" href="#tick-json" aria-hidden="true">#</a></h2><p>If you are using functions instead of command blocks, the <code>on_player_death</code> function must be added to the <code>tick.json</code> in order to loop and run it continuously. Multiple files can be added to the <code>tick.json</code> by placing a comma after each string. Refer to <a href="/commands/mcfunctions.html#tick-json">Functions</a> documentation for further info.</p>',8),y=s(`<div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">values</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">on_player_death</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If using functions, your pack folder structure will be be as follows:</p>`,2),_=e("blockquote",null,[e("p",null,[e("strong",null,"Note:"),a(" the scoreboard names (in this case: 'alive') may end up being used by other people. Appending "),e("code",null,"_"),a(" and a set of randomly generated characters after would be a choice that reduces the probability of collisions. Similar technique can be employed for the "),e("code",null,".mcfunction"),a(" filenames. Ex:")]),e("ul",null,[e("li",null,[e("code",null,"alive_0fe678")]),e("li",null,[e("code",null,"on_player_death_0fe678.mcfunction")])])],-1);function b(f,v,g,D,k,C){const o=t("CodeHeader"),r=t("FolderView");return d(),p("div",null,[m,n(o,null,{default:l(()=>[a("BP/functions/on_player_death.mcfunction")]),_:1}),h,n(o,null,{default:l(()=>[a("BP/functions/tick.json")]),_:1}),y,n(r,{paths:["BP","BP/functions","BP/pack_icon.png","BP/manifest.json","BP/functions/on_player_death.mcfunction","BP/functions/tick.json"]},null,8,["paths"]),_])}const F=c(u,[["render",b]]);export{T as __pageData,F as default};
